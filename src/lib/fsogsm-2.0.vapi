/* fsogsm-2.0.vapi generated by valac 0.14.2, do not modify. */

namespace FsoGsm {
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class AbstractAtCommand : GLib.Object, FsoGsm.AtCommandQueueCommand, FsoGsm.AtCommand {
		protected int length;
		protected GLib.MatchInfo mi;
		protected string[] prefix;
		protected GLib.Regex re;
		protected GLib.Regex tere;
		public AbstractAtCommand ();
		public virtual string get_postfix ();
		public virtual string get_prefix ();
		public virtual uint get_retry ();
		public virtual uint get_timeout ();
		public virtual void parse (string response) throws FsoGsm.AtCommandError;
		public virtual void parseMulti (string[] response) throws FsoGsm.AtCommandError;
		public virtual void parseTest (string response) throws FsoGsm.AtCommandError;
		protected int to_int (string name);
		protected string to_string (string name);
		public virtual FsoGsm.Constants.AtResponse validate (string[] response);
		public virtual FsoGsm.Constants.AtResponse validateMulti (string[] response);
		public virtual FsoGsm.Constants.AtResponse validateOk (string[] response);
		public virtual FsoGsm.Constants.AtResponse validateTest (string[] response);
		public virtual FsoGsm.Constants.AtResponse validateUrc (string response);
		public virtual FsoGsm.Constants.AtResponse validateUrcPdu (string[] response);
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class AbstractCallHandler : FsoGsm.Mediator, FsoGsm.CallHandler, FsoFramework.AbstractObject {
		public AbstractCallHandler ();
		public abstract async void activate (int id) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
		public abstract void addSupplementaryInformation (string direction, string info);
		protected abstract async void cancelOutgoingWithId (int id) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
		public virtual void handleConnectingCall (FsoGsm.CallInfo call_info);
		public virtual void handleEndingCall (FsoGsm.CallInfo call_info);
		public virtual void handleIncomingCall (FsoGsm.CallInfo call_info);
		public abstract async void hold () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
		public abstract async int initiate (string number, string ctype) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
		protected abstract async void rejectIncomingWithId (int id) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
		public abstract async void release (int id) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
		public abstract async void releaseAll () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
		protected abstract void startTimeoutIfNecessary ();
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class AbstractCdmaModem : FsoGsm.AbstractModem {
		public AbstractCdmaModem ();
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class AbstractGsmModem : FsoGsm.AbstractModem {
		public AbstractGsmModem ();
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class AbstractMediator : FsoGsm.Mediator, GLib.Object {
		public AbstractMediator ();
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class AbstractModem : FsoGsm.Modem, FsoFramework.AbstractObject {
		protected Gee.HashMap<string,FsoGsm.Channel> channels;
		protected Gee.HashMap<string,FsoGsm.AtCommand> commands;
		public string data_port;
		public int data_speed;
		public string data_transport;
		public string data_type;
		protected FsoGsm.LowLevel lowlevel;
		protected Gee.HashMap<GLib.Type,GLib.Type> mediators;
		protected uint modemSimTimeoutWatch;
		protected FsoGsm.Modem.Data modem_data;
		public string modem_port;
		public int modem_speed;
		protected FsoGsm.Modem.Status modem_status;
		protected FsoGsm.Modem.Status modem_status_before_suspend;
		public string modem_transport;
		public string modem_type;
		protected FsoGsm.UnsolicitedResponseHandler urc;
		public AbstractModem ();
		public virtual string allocateDataPort ();
		public FsoGsm.AtCommand atCommandFactory (string command) throws FreeSmartphone.Error;
		public virtual FsoGsm.Channel? channel (string category);
		protected abstract FsoGsm.Channel channelForCommand (FsoGsm.AtCommand command, string request);
		public virtual async void close ();
		protected virtual void configureData ();
		protected virtual FsoGsm.CallHandler createCallHandler ();
		protected virtual void createChannels ();
		protected virtual FsoGsm.PhonebookHandler createPhonebookHandler ();
		protected virtual FsoGsm.SmsHandler createSmsHandler ();
		protected virtual FsoGsm.UnsolicitedResponseHandler createUnsolicitedHandler ();
		protected virtual FsoGsm.WatchDog createWatchDog ();
		public virtual void injectResponse (string command, string channel) throws FreeSmartphone.Error;
		public GLib.Type mediatorFactory (GLib.Type mediator) throws FreeSmartphone.Error;
		public virtual async bool open ();
		protected virtual void powerOff ();
		protected virtual bool powerOn ();
		public void processUnsolicitedResponse (string prefix, string righthandside, string? pdu = null);
		protected virtual void registerCustomAtCommands (Gee.HashMap<string,FsoGsm.AtCommand> commands);
		protected virtual void registerCustomMediators (Gee.HashMap<GLib.Type,GLib.Type> mediators);
		public virtual void releaseDataPort ();
		public virtual async bool resume ();
		public virtual async void setFunctionality (string level, bool autoregister, string pin) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
		public virtual async bool suspend ();
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class AbstractSmsHandler : FsoGsm.SmsHandler, FsoFramework.AbstractObject {
		protected AbstractSmsHandler ();
		protected abstract async bool acknowledgeSmsMessage (int id);
		protected abstract async void fillStorageWithMessageFromSIM ();
		protected abstract async bool readSmsMessageFromSIM (uint index, out string hexpdu, out int tpdulen);
		protected abstract async string retrieveImsiFromSIM ();
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtCallActivate : FsoGsm.CallActivate {
		public AtCallActivate ();
		public override async void run (int id) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtCallHoldActive : FsoGsm.CallHoldActive {
		public AtCallHoldActive ();
		public override async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtCallInitiate : FsoGsm.CallInitiate {
		public AtCallInitiate ();
		public override async void run (string number, string ctype) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtCallListCalls : FsoGsm.CallListCalls {
		public AtCallListCalls ();
		public override async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtCallRelease : FsoGsm.CallRelease {
		public AtCallRelease ();
		public override async void run (int id) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtCallReleaseAll : FsoGsm.CallReleaseAll {
		public AtCallReleaseAll ();
		public override async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtCallSendDtmf : FsoGsm.CallSendDtmf {
		public AtCallSendDtmf ();
		public override async void run (string tones) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtCbGetCellBroadcastSubscriptions : FsoGsm.CbGetCellBroadcastSubscriptions {
		public AtCbGetCellBroadcastSubscriptions ();
		public override async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtCbSetCellBroadcastSubscriptions : FsoGsm.CbSetCellBroadcastSubscriptions {
		public AtCbSetCellBroadcastSubscriptions ();
		public override async void run (string subscriptions) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtChannel : FsoGsm.AtCommandQueue, FsoGsm.Channel {
		protected string name;
		public AtChannel (string? name, FsoFramework.Transport transport, FsoFramework.Parser parser);
		public void onModemStatusChanged (FsoGsm.Modem modem, FsoGsm.Modem.Status status);
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtCommandHandler : FsoFramework.AbstractCommandHandler {
		public FsoGsm.AtCommandQueueCommand command;
		public string[] response;
		public AtCommandHandler (FsoGsm.AtCommandQueueCommand command, string request, uint retries = 0, uint timeout = 0);
		public override string to_string ();
		public override void writeToTransport (FsoFramework.Transport transport);
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtCommandQueue : FsoFramework.AbstractCommandQueue {
		protected char* buffer;
		protected FsoFramework.Parser parser;
		public const int COMMAND_QUEUE_BUFFER_SIZE;
		public AtCommandQueue (FsoFramework.Transport transport, FsoFramework.Parser parser);
		public async string[] enqueueAsync (FsoGsm.AtCommandQueueCommand command, string request, int retries = 0, int timeout = 0);
		protected bool haveCommand ();
		protected bool isExpectedPrefix (string line);
		protected void onParserCompletedSolicited (string[] response);
		protected void onParserCompletedUnsolicited (string[] response);
		protected override void onReadFromTransport (FsoFramework.Transport t);
		protected override void onResponseTimeout (FsoFramework.AbstractCommandHandler bundle);
		protected void onSolicitedResponse (FsoGsm.AtCommandHandler bundle, string[] response);
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtCommandSequence {
		public AtCommandSequence (string[] commands);
		public void append (string[] commands);
		public async void performOnChannel (FsoGsm.AtChannel channel);
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtDebugCommand : FsoGsm.DebugCommand {
		public AtDebugCommand ();
		public override async void run (string command, string category) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtDebugInjectResponse : FsoGsm.DebugInjectResponse {
		public AtDebugInjectResponse ();
		public override async void run (string command, string category) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtDebugPing : FsoGsm.DebugPing {
		public AtDebugPing ();
		public override async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtDeviceGetAlarmTime : FsoGsm.DeviceGetAlarmTime {
		public AtDeviceGetAlarmTime ();
		public override async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtDeviceGetCurrentTime : FsoGsm.DeviceGetCurrentTime {
		public AtDeviceGetCurrentTime ();
		public override async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtDeviceGetFeatures : FsoGsm.DeviceGetFeatures {
		public AtDeviceGetFeatures ();
		public override async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtDeviceGetFunctionality : FsoGsm.DeviceGetFunctionality {
		public AtDeviceGetFunctionality ();
		public override async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtDeviceGetInformation : FsoGsm.DeviceGetInformation {
		public AtDeviceGetInformation ();
		public override async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtDeviceGetMicrophoneMuted : FsoGsm.DeviceGetMicrophoneMuted {
		public AtDeviceGetMicrophoneMuted ();
		public override async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtDeviceGetPowerStatus : FsoGsm.DeviceGetPowerStatus {
		public AtDeviceGetPowerStatus ();
		public override async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtDeviceGetSimBuffersSms : FsoGsm.DeviceGetSimBuffersSms {
		public AtDeviceGetSimBuffersSms ();
		public override async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtDeviceGetSpeakerVolume : FsoGsm.DeviceGetSpeakerVolume {
		public AtDeviceGetSpeakerVolume ();
		public override async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtDeviceSetAlarmTime : FsoGsm.DeviceSetAlarmTime {
		public AtDeviceSetAlarmTime ();
		public override async void run (int since_epoch) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtDeviceSetCurrentTime : FsoGsm.DeviceSetCurrentTime {
		public AtDeviceSetCurrentTime ();
		public override async void run (int since_epoch) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtDeviceSetFunctionality : FsoGsm.DeviceSetFunctionality {
		public AtDeviceSetFunctionality ();
		public override async void run (string level, bool autoregister, string pin) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtDeviceSetMicrophoneMuted : FsoGsm.DeviceSetMicrophoneMuted {
		public AtDeviceSetMicrophoneMuted ();
		public override async void run (bool muted) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtDeviceSetSpeakerVolume : FsoGsm.DeviceSetSpeakerVolume {
		public AtDeviceSetSpeakerVolume ();
		public override async void run (int volume) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtMonitorGetNeighbourCellInformation : FsoGsm.MonitorGetNeighbourCellInformation {
		public AtMonitorGetNeighbourCellInformation ();
		public override async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtMonitorGetServingCellInformation : FsoGsm.MonitorGetServingCellInformation {
		public AtMonitorGetServingCellInformation ();
		public override async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtNetworkGetCallingId : FsoGsm.NetworkGetCallingId {
		public AtNetworkGetCallingId ();
		public override async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtNetworkGetSignalStrength : FsoGsm.NetworkGetSignalStrength {
		public AtNetworkGetSignalStrength ();
		public override async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtNetworkGetStatus : FsoGsm.NetworkGetStatus {
		public AtNetworkGetStatus ();
		public override async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtNetworkListProviders : FsoGsm.NetworkListProviders {
		public AtNetworkListProviders ();
		public override async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtNetworkRegister : FsoGsm.NetworkRegister {
		public AtNetworkRegister ();
		public override async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtNetworkSendUssdRequest : FsoGsm.NetworkSendUssdRequest {
		public AtNetworkSendUssdRequest ();
		public override async void run (string request) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtNetworkSetCallingId : FsoGsm.NetworkSetCallingId {
		public AtNetworkSetCallingId ();
		public override async void run (FreeSmartphone.GSM.CallingIdentificationStatus status) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtNetworkUnregister : FsoGsm.NetworkUnregister {
		public AtNetworkUnregister ();
		public override async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtPdpActivateContext : FsoGsm.PdpActivateContext {
		public AtPdpActivateContext ();
		public override async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtPdpDeactivateContext : FsoGsm.PdpDeactivateContext {
		public AtPdpDeactivateContext ();
		public override async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtPdpGetCredentials : FsoGsm.PdpGetCredentials {
		public AtPdpGetCredentials ();
		public override async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtPdpHandler : FsoGsm.PdpHandler {
		protected FsoFramework.GProcessGuard ppp;
		public const string PPP_LOG_FILE;
		protected const int WAIT_FOR_PPP_COMING_UP;
		public AtPdpHandler ();
		protected virtual string[] buildCommandLine ();
		protected virtual async void enterDataState () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
		protected virtual bool launchPppDaemon (string[] cmdline);
		protected virtual async void leaveDataState ();
		public override string repr ();
		public override async void sc_activate () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
		public override async void sc_deactivate ();
		protected virtual async void setupTransport ();
		protected virtual void shutdownTransport ();
		public override async void statusUpdate (string status, GLib.HashTable<string,GLib.Variant> properties);
		public string uintToIp4Address (uint32 address);
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtPdpSetCredentials : FsoGsm.PdpSetCredentials {
		public AtPdpSetCredentials ();
		public override async void run (string apn, string username, string password) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtPhonebookHandler : FsoGsm.PhonebookHandler, FsoFramework.AbstractObject {
		public AtPhonebookHandler ();
		public T[] copy<T> (T[] array);
		public void onModemStatusChanged (FsoGsm.Modem modem, FsoGsm.Modem.Status status);
		public override string repr ();
		public async void simIsReady ();
		public async void syncWithSim ();
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtSimChangeAuthCode : FsoGsm.SimChangeAuthCode {
		public AtSimChangeAuthCode ();
		public override async void run (string oldpin, string newpin) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtSimDeleteEntry : FsoGsm.SimDeleteEntry {
		public AtSimDeleteEntry ();
		public override async void run (string category, int index) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtSimDeleteMessage : FsoGsm.SimDeleteMessage {
		public AtSimDeleteMessage ();
		public override async void run (int index) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtSimGetAuthCodeRequired : FsoGsm.SimGetAuthCodeRequired {
		public AtSimGetAuthCodeRequired ();
		public override async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtSimGetAuthStatus : FsoGsm.SimGetAuthStatus {
		public AtSimGetAuthStatus ();
		public override async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtSimGetInformation : FsoGsm.SimGetInformation {
		public AtSimGetInformation ();
		public override async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtSimGetPhonebookInfo : FsoGsm.SimGetPhonebookInfo {
		public AtSimGetPhonebookInfo ();
		public override async void run (string category, out int slots, out int numberlength, out int namelength) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtSimGetServiceCenterNumber : FsoGsm.SimGetServiceCenterNumber {
		public AtSimGetServiceCenterNumber ();
		public override async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtSimGetUnlockCounters : FsoGsm.SimGetUnlockCounters {
		public AtSimGetUnlockCounters ();
		public override async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtSimRetrieveMessage : FsoGsm.SimRetrieveMessage {
		public AtSimRetrieveMessage ();
		public override async void run (int index, out string status, out string number, out string contents, out GLib.HashTable<string,GLib.Variant> properties) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtSimRetrievePhonebook : FsoGsm.SimRetrievePhonebook {
		public AtSimRetrievePhonebook ();
		public override async void run (string category, int mindex, int maxdex) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtSimSendAuthCode : FsoGsm.SimSendAuthCode {
		public AtSimSendAuthCode ();
		public override async void run (string pin) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtSimSendStoredMessage : FsoGsm.SimSendStoredMessage {
		public AtSimSendStoredMessage ();
		public override async void run (int index) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtSimSetAuthCodeRequired : FsoGsm.SimSetAuthCodeRequired {
		public AtSimSetAuthCodeRequired ();
		public override async void run (bool required, string pin) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtSimSetServiceCenterNumber : FsoGsm.SimSetServiceCenterNumber {
		public AtSimSetServiceCenterNumber ();
		public override async void run (string number) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtSimStoreMessage : FsoGsm.SimStoreMessage {
		public AtSimStoreMessage ();
		public override async void run (string recipient_number, string contents, bool want_report) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtSimUnlock : FsoGsm.SimUnlock {
		public AtSimUnlock ();
		public override async void run (string puk, string newpin) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtSimWriteEntry : FsoGsm.SimWriteEntry {
		public AtSimWriteEntry ();
		public override async void run (string category, int index, string number, string name) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtSmsGetSizeForTextMessage : FsoGsm.SmsGetSizeForTextMessage {
		public AtSmsGetSizeForTextMessage ();
		public override async void run (string contents) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtSmsHandler : FsoGsm.SmsHandler, FsoFramework.AbstractObject {
		public AtSmsHandler ();
		public async void _handleIncomingSms (string hexpdu, int tpdulen);
		public void _handleIncomingSmsReport (Sms.Message sms);
		public void onModemStatusChanged (FsoGsm.Modem modem, FsoGsm.Modem.Status status);
		public override string repr ();
		public async void simIsReady ();
		public async void syncWithSim ();
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtSmsRetrieveTextMessages : FsoGsm.SmsRetrieveTextMessages {
		public AtSmsRetrieveTextMessages ();
		public override async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtSmsSendTextMessage : FsoGsm.SmsSendTextMessage {
		public AtSmsSendTextMessage ();
		public override async void run (string recipient_number, string contents, bool want_report) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtUnsolicitedResponseHandler : FsoGsm.BaseUnsolicitedResponseHandler {
		public AtUnsolicitedResponseHandler ();
		public virtual void no_carrier (string prefix, string rhs);
		public virtual void plusCALA (string prefix, string rhs);
		public virtual void plusCBM (string prefix, string rhs, string pdu);
		public virtual void plusCCWA (string prefix, string rhs);
		public virtual void plusCDS (string prefix, string rhs, string pdu);
		public virtual void plusCGEV (string prefix, string rhs);
		public virtual void plusCGREG (string prefix, string rhs);
		public virtual void plusCIEV (string prefix, string rhs);
		public virtual void plusCLIP (string prefix, string rhs);
		public virtual void plusCMT (string prefix, string rhs, string pdu);
		public virtual void plusCMTI (string prefix, string rhs);
		public virtual void plusCREG (string prefix, string rhs);
		public virtual void plusCRING (string prefix, string rhs);
		public virtual void plusCSSI (string prefix, string rhs);
		public virtual void plusCSSU (string prefix, string rhs);
		public virtual void plusCTZV (string prefix, string rhs);
		public virtual void plusCUSD (string prefix, string rhs);
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtVoiceMailboxGetNumber : FsoGsm.VoiceMailboxGetNumber {
		public AtVoiceMailboxGetNumber ();
		public override async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class AtVoiceMailboxSetNumber : FsoGsm.VoiceMailboxSetNumber {
		public AtVoiceMailboxSetNumber ();
		public override async void run (string number) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class BaseUnsolicitedResponseHandler : FsoGsm.UnsolicitedResponseHandler, FsoFramework.AbstractObject {
		public BaseUnsolicitedResponseHandler ();
		protected void registerUrc (string prefix, UnsolicitedResponseHandlerFunc func);
		protected void registerUrcPdu (string prefix, UnsolicitedResponsePduHandlerFunc func);
		public override string repr ();
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class Call {
		public FreeSmartphone.GSM.CallDetail detail;
		public Call ();
		public Call.newFromDetail (FreeSmartphone.GSM.CallDetail detail);
		public Call.newFromId (int id);
		public void notify (FreeSmartphone.GSM.CallDetail detail);
		public bool update (FreeSmartphone.GSM.CallDetail detail);
		public bool update_status (FreeSmartphone.GSM.CallStatus new_status);
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class CallActivate : FsoGsm.AbstractMediator {
		public CallActivate ();
		public abstract async void run (int id) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class CallHoldActive : FsoGsm.AbstractMediator {
		public CallHoldActive ();
		public abstract async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class CallInfo : GLib.Object {
		public GLib.HashTable<string,GLib.Variant?> cinfo;
		public CallInfo ();
		public CallInfo.with_ctype (string ctype);
		public string ctype { get; set; }
		public int id { get; set; }
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class CallInitiate : FsoGsm.AbstractMediator {
		public CallInitiate ();
		public abstract async void run (string number, string typ) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
		public int id { get; set; }
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class CallListCalls : FsoGsm.AbstractMediator {
		public CallListCalls ();
		public abstract async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
		public FreeSmartphone.GSM.CallDetail[] calls { get; set; }
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class CallRelease : FsoGsm.AbstractMediator {
		public CallRelease ();
		public abstract async void run (int id) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class CallReleaseAll : FsoGsm.AbstractMediator {
		public CallReleaseAll ();
		public abstract async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class CallSendDtmf : FsoGsm.AbstractMediator {
		public CallSendDtmf ();
		public abstract async void run (string tones) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class CbGetCellBroadcastSubscriptions : FsoGsm.AbstractMediator {
		public CbGetCellBroadcastSubscriptions ();
		public abstract async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
		public string subscriptions { get; set; }
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class CbSetCellBroadcastSubscriptions : FsoGsm.AbstractMediator {
		public CbSetCellBroadcastSubscriptions ();
		public abstract async void run (string subscriptions) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class Constants {
		public struct SimFilesystemEntry {
			public int id;
			public int parent;
			public string name;
		}
		public enum AtResponse {
			VALID,
			OK,
			CONNECT,
			UNEXPECTED_LENGTH,
			UNABLE_TO_PARSE,
			ERROR,
			CME_ERROR_START,
			CME_ERROR_000_PHONE_FAILURE,
			CME_ERROR_001_NO_CONNECTION_TO_PHONE,
			CME_ERROR_002_PHONE_ADAPTER_LINK_RESERVED,
			CME_ERROR_003_OPERATION_NOT_ALLOWED,
			CME_ERROR_004_OPERATION_NOT_SUPPORTED,
			CME_ERROR_005_PH_SIM_PIN_REQUIRED,
			CME_ERROR_006_PH_FSIM_PIN_REQUIRED,
			CME_ERROR_007_PH_FSIM_PUK_REQUIRED,
			CME_ERROR_010_SIM_NOT_INSERTED,
			CME_ERROR_011_SIM_PIN_REQUIRED,
			CME_ERROR_012_SIM_PUK_REQUIRED,
			CME_ERROR_013_SIM_FAILURE,
			CME_ERROR_014_SIM_BUSY,
			CME_ERROR_015_SIM_WRONG,
			CME_ERROR_016_INCORRECT_PASSWORD,
			CME_ERROR_017_SIM_PIN2_REQUIRED,
			CME_ERROR_018_SIM_PUK2_REQUIRED,
			CME_ERROR_020_MEMORY_FULL,
			CME_ERROR_021_INVALID_INDEX,
			CME_ERROR_022_NOT_FOUND,
			CME_ERROR_023_MEMORY_FAILURE,
			CME_ERROR_024_TEXT_STRING_TOO_LONG,
			CME_ERROR_025_INVALID_CHARACTERS_IN_TEXT_STRING,
			CME_ERROR_026_DIAL_STRING_TOO_LONG,
			CME_ERROR_027_INVALID_CHARACTERS_IN_DIAL_STRING,
			CME_ERROR_030_NO_NETWORK_SERVICE,
			CME_ERROR_031_NETWORK_TIMEOUT,
			CME_ERROR_032_NETWORK_NOT_ALLOWED_EMERGENCY_CALLS_ONLY,
			CME_ERROR_040_NETWORK_PERSONALIZATION_PIN_REQUIRED,
			CME_ERROR_041_NETWORK_PERSONALIZATION_PUK_REQUIRED,
			CME_ERROR_042_NETWORK_SUBSET_PERSONALIZATION_PIN_REQUIRED,
			CME_ERROR_043_NETWORK_SUBSET_PERSONALIZATION_PUK_REQUIRED,
			CME_ERROR_044_SERVICE_PROVIDER_PERSONALIZATION_PIN_REQUIRED,
			CME_ERROR_045_SERVICE_PROVIDER_PERSONALIZATION_PUK_REQUIRED,
			CME_ERROR_046_CORPORATE_PERSONALIZATION_PIN_REQUIRED,
			CME_ERROR_047_CORPORATE_PERSONALIZATION_PUK_REQUIRED,
			CME_ERROR_048_PH_SIM_PUK_REQUIRED,
			CME_ERROR_100_UNKNOWN_ERROR,
			CME_ERROR_103_GPRS_ILLEGAL_MS,
			CME_ERROR_106_GPRS_ILLEGAL_ME,
			CME_ERROR_107_GPRS_SERVICES_NOT_ALLOWED,
			CME_ERROR_111_GPRS_PLMN_NOT_ALLOWED,
			CME_ERROR_112_GPRS_LOCATION_AREA_NOT_ALLOWED,
			CME_ERROR_113_GPRS_ROAMING_NOT_ALLOWED_IN_THIS_LOCATION_AREA,
			CME_ERROR_126_GPRS_OPERATION_TEMPORARY_NOT_ALLOWED,
			CME_ERROR_132_GPRS_SERVICE_OPERATION_NOT_SUPPORTED,
			CME_ERROR_133_GPRS_REQUESTED_SERVICE_OPTION_NOT_SUBSCRIBED,
			CME_ERROR_134_GPRS_SERVICE_OPTION_TEMPORARY_OUT_OF_ORDER,
			CME_ERROR_148_GPRS_UNSPECIFIED_ERROR,
			CME_ERROR_149_GPRS_PDP_AUTHENTICATION_FAILURE,
			CME_ERROR_150_GPRS_INVALID_MOBILE_CLASS,
			CME_ERROR_256_OPERATION_TEMPORARILY_NOT_ALLOWED,
			CME_ERROR_257_CALL_BARRED,
			CME_ERROR_258_PHONE_IS_BUSY,
			CME_ERROR_259_USER_ABORT,
			CME_ERROR_260_INVALID_DIAL_STRING,
			CME_ERROR_261_SS_NOT_EXECUTED,
			CME_ERROR_262_SIM_BLOCKED,
			CME_ERROR_263_INVALID_BLOCK,
			CME_ERROR_265_BUSY_TRY_AGAIN,
			CME_ERROR_512_FAILED_TO_ABORT_COMMAND,
			CME_ERROR_513_ACM_RESET_NEEDED,
			CME_ERROR_514_SIM_APPLICATION_TOOLKIT_BUSY,
			CME_ERROR_772_SIM_POWERED_DOWN,
			CMS_ERROR_START,
			CMS_ERROR_001_UNASSIGNED_NUMBER,
			CMS_ERROR_008_OPERATOR_DETERMINED_BARRING,
			CMS_ERROR_010_CALL_BARED,
			CMS_ERROR_021_SHORT_MESSAGE_TRANSFER_REJECTED,
			CMS_ERROR_027_DESTINATION_OUT_OF_SERVICE,
			CMS_ERROR_028_UNIDENTIFIED_SUBSCRIBER,
			CMS_ERROR_029_FACILITY_REJECTED,
			CMS_ERROR_030_UNKNOWN_SUBSCRIBER,
			CMS_ERROR_038_NETWORK_OUT_OF_ORDER,
			CMS_ERROR_041_TEMPORARY_FAILURE,
			CMS_ERROR_042_CONGESTION,
			CMS_ERROR_047_RECOURCES_UNAVAILABLE,
			CMS_ERROR_050_REQUESTED_FACILITY_NOT_SUBSCRIBED,
			CMS_ERROR_069_REQUESTED_FACILITY_NOT_IMPLEMENTED,
			CMS_ERROR_081_INVALID_SHORT_MESSAGE_TRANSFER_REFERENCE_VALUE,
			CMS_ERROR_095_INVALID_MESSAGE_UNSPECIFIED,
			CMS_ERROR_096_INVALID_MANDATORY_INFORMATION,
			CMS_ERROR_097_MESSAGE_TYPE_NON_EXISTENT_OR_NOT_IMPLEMENTED,
			CMS_ERROR_098_MESSAGE_NOT_COMPATIBLE_WITH_SHORT_MESSAGE_PROTOCOL,
			CMS_ERROR_099_INFORMATION_ELEMENT_NON_EXISTENT_OR_NOT_IMPLEMENTED,
			CMS_ERROR_111_PROTOCOL_ERROR_UNSPECIFIED,
			CMS_ERROR_127_INTERNETWORKING_UNSPECIFIED,
			CMS_ERROR_128_TELEMATIC_INTERNETWORKING_NOT_SUPPORTED,
			CMS_ERROR_129_SHORT_MESSAGE_TYPE_0_NOT_SUPPORTED,
			CMS_ERROR_130_CANNOT_REPLACE_SHORT_MESSAGE,
			CMS_ERROR_143_UNSPECIFIED_TP_PID_ERROR,
			CMS_ERROR_144_DATA_CODE_SCHEME_NOT_SUPPORTED,
			CMS_ERROR_145_MESSAGE_CLASS_NOT_SUPPORTED,
			CMS_ERROR_159_UNSPECIFIED_TP_DCS_ERROR,
			CMS_ERROR_160_COMMAND_CANNOT_BE_ACTIONED,
			CMS_ERROR_161_COMMAND_UNSUPPORTED,
			CMS_ERROR_175_UNSPECIFIED_TP_COMMAND_ERROR,
			CMS_ERROR_176_TPDU_NOT_SUPPORTED,
			CMS_ERROR_192_SC_BUSY,
			CMS_ERROR_193_NO_SC_SUBSCRIPTION,
			CMS_ERROR_194_SC_SYSTEM_FAILURE,
			CMS_ERROR_195_INVALID_SME_ADDRESS,
			CMS_ERROR_196_DESTINATION_SME_BARRED,
			CMS_ERROR_197_SM_REJECTED_DUPLICATE_SM,
			CMS_ERROR_198_TP_VPF_NOT_SUPPORTED,
			CMS_ERROR_199_TP_VP_NOT_SUPPORTED,
			CMS_ERROR_208_D0_SIM_SMS_STORAGE_FULL,
			CMS_ERROR_209_NO_SMS_STORAGE_CAPABILITY_IN_SIM,
			CMS_ERROR_210_ERROR_IN_MS,
			CMS_ERROR_211_MEMORY_CAPACITY_EXCEEDED,
			CMS_ERROR_212_SIM_APPLICATION_TOOLKIT_BUSY,
			CMS_ERROR_213_SIM_DATA_DOWNLOAD_ERROR,
			CMS_ERROR_255_UNSPECIFIED_ERROR_CAUSE,
			CMS_ERROR_300_ME_FAILURE,
			CMS_ERROR_301_SMS_SERVICE_OF_ME_RESERVED,
			CMS_ERROR_302_OPERATION_NOT_ALLOWED,
			CMS_ERROR_303_OPERATION_NOT_SUPPORTED,
			CMS_ERROR_304_INVALID_PDU_MODE_PARAMETER,
			CMS_ERROR_305_INVALID_TEXT_MODE_PARAMETER,
			CMS_ERROR_310_SIM_NOT_INSERTED,
			CMS_ERROR_311_SIM_PIN_REQUIRED,
			CMS_ERROR_312_PH_SIM_PIN_REQUIRED,
			CMS_ERROR_313_SIM_FAILURE,
			CMS_ERROR_314_SIM_BUSY,
			CMS_ERROR_315_SIM_WRONG,
			CMS_ERROR_316_SIM_PUK_REQUIRED,
			CMS_ERROR_317_SIM_PIN2_REQUIRED,
			CMS_ERROR_318_SIM_PUK2_REQUIRED,
			CMS_ERROR_320_MEMORY_FAILURE,
			CMS_ERROR_321_INVALID_MEMORY_INDEX,
			CMS_ERROR_322_MEMORY_FULL,
			CMS_ERROR_330_SMSC_ADDRESS_UNKNOWN,
			CMS_ERROR_331_NO_NETWORK_SERVICE,
			CMS_ERROR_332_NETWORK_TIMEOUT,
			CMS_ERROR_340_NO_CNMA_EXPECTED,
			CMS_ERROR_500_UNKNOWN_ERROR,
			CMS_ERROR_512_FAILED_TO_ABORT_COMMAND,
			CMS_ERROR_513_ACM_RESET_NEEDED,
			CMS_ERROR_514_INVALID_STATUS,
			CMS_ERROR_515_DEVICE_BUSY_OR_INVALID_CHARACTER_IN_STRING,
			CMS_ERROR_516_INVALID_LENGTH,
			CMS_ERROR_517_INVALID_CHARACTER_IN_PDU,
			CMS_ERROR_518_INVALID_PARAMETER,
			CMS_ERROR_519_INVALID_LENGTH_OR_CHARACTER,
			CMS_ERROR_520_INVALID_CHARACTER_IN_TEXT,
			CMS_ERROR_521_TIMER_EXPIRED,
			CMS_ERROR_522_OPERATION_TEMPORARY_NOT_ALLOWED,
			CMS_ERROR_532_SIM_NOT_READY,
			CMS_ERROR_534_CELL_BROADCAST_ERROR_UNKNOWN,
			CMS_ERROR_535_PROTOCOL_STACK_BUSY,
			CMS_ERROR_538_INVALID_PARAMETER,
			EXT_ERROR_START,
			EXT_ERROR_0_INVALID_PARAMETERR
		}
		public enum SimFilesystemCommand {
			READ_BINARY,
			READ_RECORD,
			UPDATE_BINARY,
			UPDATE_RECORD,
			STATUS
		}
		public const uint CALL_INDEX_MAX;
		public const int CALL_INDEX_MIN;
		public const string PHONE_DIGITS;
		public const string PHONE_DIGITS_RE;
		public const FsoGsm.Constants.SimFilesystemEntry[] SimFilesystem;
		public Constants ();
		public FreeSmartphone.GSM.Error atResponseCodeToError (FsoGsm.Constants.AtResponse code, string detail);
		public string callDirectionToString (int code);
		public FreeSmartphone.GSM.CallStatus callStatusToEnum (int code);
		public string callStatusToString (int code);
		public int callStringToType (string ctype);
		public string callTypeToString (int code);
		public string ceerCauseToString (int location, int reason, int ssrelease);
		public string cleanPhoneNumber (string number);
		public string cssiCodeToString (int code);
		public string cssuCodeToString (int code);
		public int ctzvToTimeZone (int ctzv);
		public string deviceFunctionalityStatusToString (int code);
		public int deviceFunctionalityStringToStatus (string level);
		public string devicePowerStatusToString (int code);
		public static FsoGsm.Constants instance ();
		public string networkProviderActToString (int code);
		public string networkProviderStatusToString (int code);
		public string networkRegistrationModeToString (int code);
		public string networkRegistrationStatusToString (int code);
		public int networkSignalIndicatorToPercentage (int sig);
		public int networkSignalToPercentage (int sig);
		public string phonenumberStringToRealTuple (string number, out uint8 ntype);
		public string phonenumberStringToTuple (string number);
		public string phonenumberTupleToString (string number, int ntype);
		public FreeSmartphone.GSM.SIMAuthStatus simAuthStatusToEnum (string status);
		public int simFilesystemEntryNameToCode (string name);
		public string simMessagebookStatusToString (int code);
		public FsoGsm.PlusCMGL.Mode simMessagebookStringToStatus (string category);
		public string simPhonebookCodeToString (string code);
		public string simPhonebookStringToCode (string category);
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class ContextParams {
		public string apn;
		public string password;
		public string username;
		public ContextParams (string apn, string username, string password);
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class CustomAtCommand : FsoGsm.AbstractAtCommand {
		protected string name;
		public CustomAtCommand (string name = "", bool prefixoptional = false);
		public virtual string execute ();
		public virtual string query ();
		public virtual string test ();
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class DebugCommand : FsoGsm.AbstractMediator {
		public DebugCommand ();
		public abstract async void run (string command, string channel) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
		public string response { get; set; }
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class DebugInjectResponse : FsoGsm.AbstractMediator {
		public DebugInjectResponse ();
		public abstract async void run (string command, string channel) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class DebugPing : FsoGsm.AbstractMediator {
		public DebugPing ();
		public abstract async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class DeviceGetAlarmTime : FsoGsm.AbstractMediator {
		public DeviceGetAlarmTime ();
		public abstract async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
		public int since_epoch { get; set; }
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class DeviceGetCurrentTime : FsoGsm.AbstractMediator {
		public DeviceGetCurrentTime ();
		public abstract async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
		public int since_epoch { get; set; }
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class DeviceGetFeatures : FsoGsm.AbstractMediator {
		public DeviceGetFeatures ();
		public abstract async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
		public GLib.HashTable<string,GLib.Variant> features { get; set; }
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class DeviceGetFunctionality : FsoGsm.AbstractMediator {
		public DeviceGetFunctionality ();
		public abstract async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
		public bool autoregister { get; set; }
		public string level { get; set; }
		public string pin { get; set; }
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class DeviceGetInformation : FsoGsm.AbstractMediator {
		public DeviceGetInformation ();
		public abstract async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
		public GLib.HashTable<string,GLib.Variant> info { get; set; }
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class DeviceGetMicrophoneMuted : FsoGsm.AbstractMediator {
		public DeviceGetMicrophoneMuted ();
		public abstract async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
		public bool muted { get; set; }
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class DeviceGetPowerStatus : FsoGsm.AbstractMediator {
		public DeviceGetPowerStatus ();
		public abstract async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
		public int level { get; set; }
		public FreeSmartphone.Device.PowerStatus status { get; set; }
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class DeviceGetSimBuffersSms : FsoGsm.AbstractMediator {
		public DeviceGetSimBuffersSms ();
		public abstract async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
		public bool buffers { get; set; }
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class DeviceGetSpeakerVolume : FsoGsm.AbstractMediator {
		public DeviceGetSpeakerVolume ();
		public abstract async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
		public int volume { get; set; }
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class DeviceSetAlarmTime : FsoGsm.AbstractMediator {
		public DeviceSetAlarmTime ();
		public abstract async void run (int since_epoch) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class DeviceSetCurrentTime : FsoGsm.AbstractMediator {
		public DeviceSetCurrentTime ();
		public abstract async void run (int since_epoch) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class DeviceSetFunctionality : FsoGsm.AbstractMediator {
		public DeviceSetFunctionality ();
		public abstract async void run (string level, bool autoregister, string pin) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class DeviceSetMicrophoneMuted : FsoGsm.AbstractMediator {
		public DeviceSetMicrophoneMuted ();
		public abstract async void run (bool muted) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class DeviceSetSpeakerVolume : FsoGsm.AbstractMediator {
		public DeviceSetSpeakerVolume ();
		public abstract async void run (int volume) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class GenericAtCallHandler : FsoGsm.AbstractCallHandler {
		protected FsoGsm.Call[] calls;
		protected FsoFramework.Pair<string,string> supplementary;
		protected uint timeout;
		public GenericAtCallHandler ();
		public override async void activate (int id) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
		public override void addSupplementaryInformation (string direction, string info);
		protected override async void cancelOutgoingWithId (int id) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
		public override async void hold () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
		public override async int initiate (string number, string ctype) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
		protected bool onTimeout ();
		protected override async void rejectIncomingWithId (int id) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
		public override async void release (int id) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
		public override async void releaseAll () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
		public override string repr ();
		protected override void startTimeoutIfNecessary ();
		protected async void syncCallStatus ();
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class GenericWatchDog : FsoGsm.WatchDog, FsoFramework.AbstractObject {
		public GenericWatchDog ();
		public override string repr ();
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class LibGsm0710muxTransport : FsoFramework.BaseTransport {
		public LibGsm0710muxTransport (int channel = 0);
		public override void close ();
		public void delegateClose (FsoFramework.Transport t);
		public int delegateFreeze (FsoFramework.Transport t);
		public void delegateHup (FsoFramework.Transport t);
		public bool delegateOpen (FsoFramework.Transport t);
		public int delegateRead (void* data, int length, FsoFramework.Transport t);
		public void delegateThaw (FsoFramework.Transport t);
		public int delegateWrite (void* data, int length, FsoFramework.Transport t);
		public override int freeze ();
		public bool isForwardingToPPP ();
		public override bool isOpen ();
		public void onDataFromPPP (void* data, ssize_t length);
		public override bool open ();
		public override async bool openAsync ();
		public override int read (void* data, int length);
		public override string repr ();
		public void startForwardingToPPP (int infd, int outfd);
		public void stopForwardingToPPP ();
		public override void thaw ();
		public override int write (void* data, int length);
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class MonitorGetNeighbourCellInformation : FsoGsm.AbstractMediator {
		public MonitorGetNeighbourCellInformation ();
		public abstract async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
		public GLib.HashTable<string,GLib.Variant>[] cells { get; set; }
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class MonitorGetServingCellInformation : FsoGsm.AbstractMediator {
		public MonitorGetServingCellInformation ();
		public abstract async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
		public GLib.HashTable<string,GLib.Variant> cell { get; set; }
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class NetworkGetCallingId : FsoGsm.AbstractMediator {
		public NetworkGetCallingId ();
		public abstract async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
		public FreeSmartphone.GSM.CallingIdentificationStatus status { get; set; }
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class NetworkGetSignalStrength : FsoGsm.AbstractMediator {
		public NetworkGetSignalStrength ();
		public abstract async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
		public int @signal { get; set; }
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class NetworkGetStatus : FsoGsm.AbstractMediator {
		public NetworkGetStatus ();
		public abstract async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
		public GLib.HashTable<string,GLib.Variant> status { get; set; }
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class NetworkListProviders : FsoGsm.AbstractMediator {
		public NetworkListProviders ();
		public abstract async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
		public FreeSmartphone.GSM.NetworkProvider[] providers { get; set; }
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class NetworkRegister : FsoGsm.AbstractMediator {
		public NetworkRegister ();
		public abstract async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class NetworkRegisterWithProvider : FsoGsm.AbstractMediator {
		public NetworkRegisterWithProvider ();
		public abstract async void run (string provider) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class NetworkSendUssdRequest : FsoGsm.AbstractMediator {
		public NetworkSendUssdRequest ();
		public abstract async void run (string request) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class NetworkSetCallingId : FsoGsm.AbstractMediator {
		public NetworkSetCallingId ();
		public abstract async void run (FreeSmartphone.GSM.CallingIdentificationStatus status) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class NetworkTimeReport {
		public int time;
		public int timestamp;
		public int zone;
		public int zonestamp;
		public NetworkTimeReport ();
		public void setTime (int time);
		public void setTimeAndZone (int time, int zone);
		public void setZone (int zone);
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class NetworkUnregister : FsoGsm.AbstractMediator {
		public NetworkUnregister ();
		public abstract async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class NullLowLevel : FsoGsm.LowLevel, FsoFramework.AbstractObject {
		public NullLowLevel ();
		public override string repr ();
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class PdpActivateContext : FsoGsm.AbstractMediator {
		public PdpActivateContext ();
		public abstract async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class PdpDeactivateContext : FsoGsm.AbstractMediator {
		public PdpDeactivateContext ();
		public abstract async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class PdpGetCredentials : FsoGsm.AbstractMediator {
		public PdpGetCredentials ();
		public abstract async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
		public string apn { get; set; }
		public string password { get; set; }
		public string username { get; set; }
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class PdpHandler : FsoGsm.IPdpHandler, FsoFramework.AbstractObject {
		public PdpHandler ();
		protected virtual async void sc_activate () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
		protected virtual async void sc_deactivate () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
		public abstract async void statusUpdate (string status, GLib.HashTable<string,GLib.Variant> properties);
		public async void syncStatus ();
		protected async void updateStatus (FreeSmartphone.GSM.ContextStatus status, GLib.HashTable<string,GLib.Variant> properties);
		public GLib.HashTable<string,GLib.Variant> properties { get; set; }
		public FreeSmartphone.GSM.ContextStatus status { get; set; }
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class PdpSetCredentials : FsoGsm.AbstractMediator {
		public PdpSetCredentials ();
		public abstract async void run (string apn, string username, string password) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class PhonebookParams {
		public int max;
		public int min;
		public PhonebookParams (int min, int max);
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class PhonebookStorage : FsoFramework.AbstractObject {
		public PhonebookStorage (string imsi);
		public void addPhonebook (string cat, int mindex, int maxdex, FreeSmartphone.GSM.SIMEntry[] phonebook);
		public void clean ();
		public FreeSmartphone.GSM.SIMEntry[] phonebook (string cat, int mindex, int maxdex);
		public override string repr ();
		public static void setStorageDir (string dirname);
		public void writePhonebookEntry (FreeSmartphone.GSM.SIMEntry entry, string filename);
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class PlusCALA : FsoGsm.AbstractAtCommand {
		public int day;
		public int hour;
		public int minute;
		public int month;
		public int second;
		public int tzoffset;
		public int year;
		public PlusCALA ();
		public string clear ();
		public string issue (int year, int month, int day, int hour, int minute, int second, int tzoffset);
		public override void parse (string response) throws FsoGsm.AtCommandError;
		public string query ();
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class PlusCBC : FsoGsm.AbstractAtCommand {
		public enum Status {
			DISCHARGING,
			CHARGING,
			AC,
			UNKNOWN
		}
		public int level;
		public FsoGsm.PlusCBC.Status status;
		public PlusCBC ();
		public string execute ();
		public override void parse (string response) throws FsoGsm.AtCommandError;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class PlusCBM : FsoGsm.AbstractAtCommand {
		public string hexpdu;
		public int tpdulen;
		public PlusCBM ();
		public override void parseMulti (string[] response) throws FsoGsm.AtCommandError;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class PlusCCLK : FsoGsm.AbstractAtCommand {
		public int day;
		public int hour;
		public int minute;
		public int month;
		public int second;
		public int tzoffset;
		public int year;
		public PlusCCLK ();
		public string issue (int year, int month, int day, int hour, int minute, int second, int tzoffset);
		public override void parse (string response) throws FsoGsm.AtCommandError;
		public string query ();
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class PlusCDS : FsoGsm.AbstractAtCommand {
		public string hexpdu;
		public int tpdulen;
		public PlusCDS ();
		public override void parseMulti (string[] response) throws FsoGsm.AtCommandError;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class PlusCEER : FsoGsm.AbstractAtCommand {
		public string reason;
		public PlusCEER ();
		public string execute ();
		public override void parse (string response) throws FsoGsm.AtCommandError;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class PlusCFUN : FsoGsm.SimpleAtCommand<int> {
		public PlusCFUN ();
		public override uint get_timeout ();
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class PlusCGACT : FsoGsm.SimpleAtCommand<int> {
		public PlusCGACT ();
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class PlusCGATT : FsoGsm.SimpleAtCommand<int> {
		public PlusCGATT ();
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class PlusCGCLASS : FsoGsm.SimpleAtCommand<string> {
		public PlusCGCLASS ();
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class PlusCGDCONT : FsoGsm.AbstractAtCommand {
		public PlusCGDCONT ();
		public string issue (string apn);
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class PlusCGMI : FsoGsm.SimpleAtCommand<string> {
		public PlusCGMI ();
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class PlusCGMM : FsoGsm.SimpleAtCommand<string> {
		public PlusCGMM ();
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class PlusCGMR : FsoGsm.SimpleAtCommand<string> {
		public PlusCGMR ();
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class PlusCGREG : FsoGsm.AbstractAtCommand {
		public string cid;
		public string lac;
		public int mode;
		public int status;
		public PlusCGREG ();
		public string issue (int mode);
		public override void parse (string response) throws FsoGsm.AtCommandError;
		public string query ();
		public string queryFull (int restoreMode);
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class PlusCGSN : FsoGsm.SimpleAtCommand<string> {
		public PlusCGSN ();
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class PlusCHLD : FsoGsm.AbstractAtCommand {
		public enum Action {
			DROP_ALL_OR_SEND_BUSY,
			DROP_ALL_AND_ACCEPT_WAITING_OR_HELD,
			DROP_SPECIFIC_AND_ACCEPT_WAITING_OR_HELD,
			HOLD_ALL_AND_ACCEPT_WAITING_OR_HELD,
			HOLD_SPECIFIC_AND_ACCEPT_WAITING_OR_HELD,
			ACTIVATE_HELD,
			DROP_SELF_AND_CONNECT_ACTIVE
		}
		public PlusCHLD ();
		public string issue (FsoGsm.PlusCHLD.Action action, int cid = 0);
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class PlusCIEV : FsoGsm.TwoParamsAtCommand<int,int> {
		public PlusCIEV ();
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class PlusCIMI : FsoGsm.SimpleAtCommand<string> {
		public PlusCIMI ();
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class PlusCLCC : FsoGsm.AbstractAtCommand {
		public FreeSmartphone.GSM.CallDetail[] calls;
		public PlusCLCC ();
		public string execute ();
		public override void parseMulti (string[] response) throws FsoGsm.AtCommandError;
		public string query ();
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class PlusCLCK : FsoGsm.AbstractAtCommand {
		public enum Mode {
			DISABLE,
			ENABLE,
			QUERY
		}
		public bool enabled;
		public string facilities;
		public int klass;
		public PlusCLCK ();
		public string issue (string facility, bool enable, string pin);
		public override void parse (string response) throws FsoGsm.AtCommandError;
		public override void parseTest (string response) throws FsoGsm.AtCommandError;
		public string query (string facility);
		public string test ();
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class PlusCLIR : FsoGsm.SimpleAtCommand<int> {
		public PlusCLIR ();
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class PlusCLVL : FsoGsm.SimpleAtCommand<int> {
		public PlusCLVL ();
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class PlusCMGD : FsoGsm.SimpleAtCommand<int> {
		public PlusCMGD ();
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class PlusCMGL : FsoGsm.AbstractAtCommand {
		public enum Mode {
			INVALID,
			REC_UNREAD,
			REC_READ,
			STO_UNSENT,
			STO_SENT,
			ALL
		}
		public Gee.ArrayList<WrapSms> messagebook;
		public PlusCMGL ();
		public string issue (FsoGsm.PlusCMGL.Mode mode);
		public override void parseMulti (string[] response) throws FsoGsm.AtCommandError;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class PlusCMGR : FsoGsm.AbstractAtCommand {
		public string hexpdu;
		public FsoGsm.PlusCMGL.Mode status;
		public int tpdulen;
		public PlusCMGR ();
		public string issue (uint index);
		public override void parseMulti (string[] response) throws FsoGsm.AtCommandError;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class PlusCMGS : FsoGsm.AbstractAtCommand {
		public int refnum;
		public PlusCMGS ();
		public override string get_postfix ();
		public override string get_prefix ();
		public override uint get_timeout ();
		public string issue (WrapHexPdu pdu);
		public override void parse (string response) throws FsoGsm.AtCommandError;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class PlusCMGW : FsoGsm.AbstractAtCommand {
		public int memory_index;
		public PlusCMGW ();
		public override string get_postfix ();
		public override string get_prefix ();
		public string issue (WrapHexPdu pdu);
		public override void parse (string response) throws FsoGsm.AtCommandError;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class PlusCMICKEY : FsoGsm.SimpleAtCommand<int> {
		public PlusCMICKEY ();
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class PlusCMMS : FsoGsm.SimpleAtCommand<int> {
		public PlusCMMS ();
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class PlusCMSS : FsoGsm.AbstractAtCommand {
		public int refnum;
		public PlusCMSS ();
		public string issue (int index);
		public override void parse (string response) throws FsoGsm.AtCommandError;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class PlusCMT : FsoGsm.AbstractAtCommand {
		public string hexpdu;
		public int tpdulen;
		public PlusCMT ();
		public override void parseMulti (string[] response) throws FsoGsm.AtCommandError;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class PlusCMTI : FsoGsm.AbstractAtCommand {
		public int index;
		public string storage;
		public PlusCMTI ();
		public override void parse (string response) throws FsoGsm.AtCommandError;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class PlusCMUT : FsoGsm.SimpleAtCommand<int> {
		public PlusCMUT ();
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class PlusCNMA : FsoGsm.SimpleAtCommand<int> {
		public PlusCNMA ();
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class PlusCNMI : FsoGsm.AbstractAtCommand {
		public int bfr;
		public int bm;
		public int ds;
		public int mode;
		public int mt;
		public PlusCNMI ();
		public string issue (int mode, int mt, int bm, int ds, int bfr);
		public override void parse (string response) throws FsoGsm.AtCommandError;
		public string query ();
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class PlusCOPN : FsoGsm.AbstractAtCommand {
		public GLib.HashTable<string,string> operators;
		public PlusCOPN ();
		public string execute ();
		public override uint get_timeout ();
		public override void parseMulti (string[] response) throws FsoGsm.AtCommandError;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class PlusCOPS : FsoGsm.AbstractAtCommand {
		public enum Action {
			REGISTER_WITH_BEST_PROVIDER,
			REGISTER_WITH_SPECIFIC_PROVIDER,
			UNREGISTER,
			SET_FORMAT
		}
		public enum Format {
			ALPHANUMERIC,
			ALPHANUMERIC_SHORT,
			NUMERIC
		}
		public string act;
		public int format;
		public int mode;
		public string oper;
		public static bool providerNameDeliveredInConfiguredCharset;
		public FreeSmartphone.GSM.NetworkProvider[] providers;
		public int status;
		public PlusCOPS ();
		public override uint get_timeout ();
		public string issue (FsoGsm.PlusCOPS.Action action, FsoGsm.PlusCOPS.Format format = Format.ALPHANUMERIC, int param = 0);
		public override void parse (string response) throws FsoGsm.AtCommandError;
		public override void parseTest (string response) throws FsoGsm.AtCommandError;
		public string query (FsoGsm.PlusCOPS.Format format = Format.ALPHANUMERIC);
		public string test ();
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class PlusCPBR : FsoGsm.AbstractAtCommand {
		public int max;
		public int min;
		public FreeSmartphone.GSM.SIMEntry[] phonebook;
		public PlusCPBR ();
		public string issue (string cat, int first, int last);
		public override void parseMulti (string[] response) throws FsoGsm.AtCommandError;
		public override void parseTest (string response) throws FsoGsm.AtCommandError;
		public string test (string cat);
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class PlusCPBS : FsoGsm.AbstractAtCommand {
		public string[] phonebooks;
		public PlusCPBS ();
		public override void parseTest (string response) throws FsoGsm.AtCommandError;
		public string test ();
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class PlusCPBW : FsoGsm.AbstractAtCommand {
		public int max;
		public int nlength;
		public int tlength;
		public PlusCPBW ();
		public string issue (string cat, int location, string number = "", string name = "");
		public override void parseTest (string response) throws FsoGsm.AtCommandError;
		public string test (string cat);
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class PlusCPIN : FsoGsm.AbstractAtCommand {
		public FreeSmartphone.GSM.SIMAuthStatus status;
		public PlusCPIN ();
		public override uint get_timeout ();
		public string issue (string pin, string? new_pin = null);
		public override void parse (string response) throws FsoGsm.AtCommandError;
		public string query ();
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class PlusCPMS : FsoGsm.AbstractAtCommand {
		public int total;
		public int used;
		public PlusCPMS ();
		public string issue (string s1 = "SM", string s2 = "SM", string s3 = "SM");
		public override void parse (string response) throws FsoGsm.AtCommandError;
		public string query ();
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class PlusCPWD : FsoGsm.AbstractAtCommand {
		public PlusCPWD ();
		public string issue (string facility, string p1, string p2);
		public override void parse (string response) throws FsoGsm.AtCommandError;
		public string query ();
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class PlusCREG : FsoGsm.AbstractAtCommand {
		public string cid;
		public string lac;
		public int mode;
		public int status;
		public PlusCREG ();
		public string issue (int mode);
		public override void parse (string response) throws FsoGsm.AtCommandError;
		public string query ();
		public string queryFull (int restoreMode);
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class PlusCRSM : FsoGsm.AbstractAtCommand {
		public string payload;
		public PlusCRSM ();
		public string issue (int command, int p1, int p2, int offset, int length);
		public override void parse (string response) throws FsoGsm.AtCommandError;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class PlusCSCA : FsoGsm.AbstractAtCommand {
		public string number;
		public PlusCSCA ();
		public string issue (string number);
		public override void parse (string response) throws FsoGsm.AtCommandError;
		public string query ();
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class PlusCSCB : FsoGsm.AbstractAtCommand {
		public enum Mode {
			NONE,
			ALL
		}
		public int channels;
		public int encodings;
		public int mode;
		public PlusCSCB ();
		public string issue (FsoGsm.PlusCSCB.Mode m);
		public override void parse (string response) throws FsoGsm.AtCommandError;
		public string query ();
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class PlusCSCS : FsoGsm.SimpleAtCommand<string> {
		public PlusCSCS ();
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class PlusCSQ : FsoGsm.AbstractAtCommand {
		public int @signal;
		public PlusCSQ ();
		public string execute ();
		public override void parse (string response) throws FsoGsm.AtCommandError;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class PlusCSSI : FsoGsm.SimpleAtCommand<int> {
		public PlusCSSI ();
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class PlusCSSU : FsoGsm.SimpleAtCommand<int> {
		public PlusCSSU ();
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class PlusCUSD : FsoGsm.AbstractAtCommand {
		public enum Mode {
			COMPLETED,
			USERACTION,
			TERMINATED,
			LOCALCLIENT,
			UNSUPPORTED,
			TIMEOUT
		}
		public int code;
		public FsoGsm.PlusCUSD.Mode mode;
		public string result;
		public PlusCUSD ();
		public string issue (bool enable);
		public override void parse (string response) throws FsoGsm.AtCommandError;
		public string query (string request);
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class PlusFCLASS : FsoGsm.SimpleAtCommand<string> {
		public PlusFCLASS ();
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class PlusGCAP : FsoGsm.SimpleAtCommand<string> {
		public PlusGCAP ();
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class PlusVTS : FsoGsm.AbstractAtCommand {
		public const string DTMF_VALID_CHARS;
		public PlusVTS ();
		public string issue (string tones);
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class RouteInfo {
		public string dns1;
		public string dns2;
		public string iface;
		public string ipv4addr;
		public string ipv4gateway;
		public string ipv4mask;
		public RouteInfo ();
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class SimChangeAuthCode : FsoGsm.AbstractMediator {
		public SimChangeAuthCode ();
		public abstract async void run (string oldpin, string newpin) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class SimDeleteEntry : FsoGsm.AbstractMediator {
		public SimDeleteEntry ();
		public abstract async void run (string category, int index) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class SimDeleteMessage : FsoGsm.AbstractMediator {
		public SimDeleteMessage ();
		public abstract async void run (int index) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class SimGetAuthCodeRequired : FsoGsm.AbstractMediator {
		public bool required;
		public SimGetAuthCodeRequired ();
		public abstract async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class SimGetAuthStatus : FsoGsm.AbstractMediator {
		public FreeSmartphone.GSM.SIMAuthStatus status;
		public SimGetAuthStatus ();
		public abstract async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class SimGetInformation : FsoGsm.AbstractMediator {
		public SimGetInformation ();
		public abstract async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
		public GLib.HashTable<string,GLib.Variant> info { get; set; }
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class SimGetPhonebookInfo : FsoGsm.AbstractMediator {
		public SimGetPhonebookInfo ();
		public abstract async void run (string category, out int slots, out int numberlength, out int namelength) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class SimGetServiceCenterNumber : FsoGsm.AbstractMediator {
		public string number;
		public SimGetServiceCenterNumber ();
		public abstract async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class SimGetUnlockCounters : FsoGsm.AbstractMediator {
		public SimGetUnlockCounters ();
		public abstract async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
		public GLib.HashTable<string,GLib.Variant> counters { get; set; }
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class SimRetrieveMessage : FsoGsm.AbstractMediator {
		public SimRetrieveMessage ();
		public abstract async void run (int index, out string status, out string number, out string contents, out GLib.HashTable<string,GLib.Variant> properties) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class SimRetrievePhonebook : FsoGsm.AbstractMediator {
		public SimRetrievePhonebook ();
		public abstract async void run (string category, int mindex, int maxdex) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
		public FreeSmartphone.GSM.SIMEntry[] phonebook { get; set; }
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class SimSendAuthCode : FsoGsm.AbstractMediator {
		public SimSendAuthCode ();
		public abstract async void run (string pin) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class SimSendStoredMessage : FsoGsm.AbstractMediator {
		public SimSendStoredMessage ();
		public abstract async void run (int index) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
		public string timestamp { get; set; }
		public int transaction_index { get; set; }
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class SimSetAuthCodeRequired : FsoGsm.AbstractMediator {
		public SimSetAuthCodeRequired ();
		public abstract async void run (bool required, string pin) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class SimSetServiceCenterNumber : FsoGsm.AbstractMediator {
		public SimSetServiceCenterNumber ();
		public abstract async void run (string number) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class SimStoreMessage : FsoGsm.AbstractMediator {
		public SimStoreMessage ();
		public abstract async void run (string recipient_number, string contents, bool want_report) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
		public int memory_index { get; set; }
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class SimUnlock : FsoGsm.AbstractMediator {
		public SimUnlock ();
		public abstract async void run (string puk, string newpin) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class SimWriteEntry : FsoGsm.AbstractMediator {
		public SimWriteEntry ();
		public abstract async void run (string category, int index, string number, string name) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class SimpleAtCommand<T> : FsoGsm.AbstractAtCommand {
		public int max;
		public int min;
		public string righthandside;
		public T value;
		public SimpleAtCommand (string name, bool prefixoptional = false);
		public string execute ();
		public string issue (T val);
		public override void parse (string response) throws FsoGsm.AtCommandError;
		public override void parseTest (string response) throws FsoGsm.AtCommandError;
		public string query ();
		public string test ();
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class SmsGetSizeForTextMessage : FsoGsm.AbstractMediator {
		public SmsGetSizeForTextMessage ();
		public abstract async void run (string contents) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
		public uint size { get; set; }
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class SmsRetrieveTextMessages : FsoGsm.AbstractMediator {
		public SmsRetrieveTextMessages ();
		public abstract async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
		public FreeSmartphone.GSM.SIMMessage[] messagebook { get; set; }
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class SmsSendTextMessage : FsoGsm.AbstractMediator {
		public SmsSendTextMessage ();
		public abstract async void run (string recipient_number, string contents, bool want_report) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
		public string timestamp { get; set; }
		public int transaction_index { get; set; }
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class SmsStorage : FsoFramework.AbstractObject {
		public const int SMS_ALREADY_SEEN;
		public const int SMS_MULTI_INCOMPLETE;
		public const int SMS_SINGLE_COMPLETE;
		public SmsStorage (string imsi);
		public int addSms (Sms.Message message);
		public void clean ();
		public int confirmReceivedMessage (int netreference);
		public uint16 increasingReferenceNumber ();
		public Gee.ArrayList<string> keys ();
		public uint16 lastReferenceNumber ();
		public FreeSmartphone.GSM.SIMMessage message (string key, int index = 0);
		public FreeSmartphone.GSM.SIMMessage[] messagebook ();
		public override string repr ();
		public static void setStorageDir (string dirname);
		public void storeTransactionIndizesForSentMessage (Gee.ArrayList<WrapHexPdu> hexpdus);
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class StateBasedAtParser : FsoFramework.BaseParser {
		public enum State {
			INVALID,
			START,
			START_R,
			V0_RESULT,
			ECHO_A,
			ECHO_INLINE,
			CONTINUATION,
			INLINE,
			INLINE_R
		}
		public StateBasedAtParser ();
		public FsoGsm.StateBasedAtParser.State continuation (char c);
		public FsoGsm.StateBasedAtParser.State dispatch (FsoGsm.StateBasedAtParser.State curstate, char c);
		public FsoGsm.StateBasedAtParser.State echo_a (char c);
		public FsoGsm.StateBasedAtParser.State echo_inline (char c);
		public FsoGsm.StateBasedAtParser.State endofline ();
		public FsoGsm.StateBasedAtParser.State endoflinePerhapsSolicited ();
		public FsoGsm.StateBasedAtParser.State endoflineSurelySolicited ();
		public FsoGsm.StateBasedAtParser.State endoflineSurelyUnsolicited ();
		public override int feed (char* data, int len);
		protected bool hasSolicitedPdu ();
		protected bool hasUnsolicitedPdu ();
		public FsoGsm.StateBasedAtParser.State @inline (char c);
		public FsoGsm.StateBasedAtParser.State inline_r (char c);
		public FsoGsm.StateBasedAtParser.State invalid (char c);
		protected bool isFinalResponse ();
		public FsoGsm.StateBasedAtParser.State resetAll (bool soli = true);
		public FsoGsm.StateBasedAtParser.State resetLine (bool end = false);
		public FsoGsm.StateBasedAtParser.State start (char c);
		public FsoGsm.StateBasedAtParser.State start_r (char c);
		public FsoGsm.StateBasedAtParser.State v0_result (char c);
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class TwoParamsAtCommand<T1,T2> : FsoGsm.AbstractAtCommand {
		public T1 value1;
		public T2 value2;
		public TwoParamsAtCommand (string name, bool prefixoptional = false);
		public string execute ();
		public string issue (T1 val1, T2 val2);
		public override void parse (string response) throws FsoGsm.AtCommandError;
		public string query ();
		public string test ();
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class V250A : FsoGsm.V250terCommand {
		public V250A ();
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class V250D : FsoGsm.V250terCommand {
		public V250D ();
		public override uint get_timeout ();
		public string issue (string number, bool voice = true);
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class V250H : FsoGsm.V250terCommand {
		public V250H ();
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public class V250terCommand : FsoGsm.AbstractAtCommand {
		public string name;
		public V250terCommand (string name);
		public string execute ();
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class VoiceMailboxGetNumber : FsoGsm.AbstractMediator {
		public string number;
		public VoiceMailboxGetNumber ();
		public abstract async void run () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public abstract class VoiceMailboxSetNumber : FsoGsm.AbstractMediator {
		public VoiceMailboxSetNumber ();
		public abstract async void run (string number) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public interface AtCommand : GLib.Object, FsoGsm.AtCommandQueueCommand {
		public abstract string decodeString (string str);
		public abstract string encodeString (string str);
		public abstract string get_postfix ();
		public abstract string get_prefix ();
		public abstract uint get_retry ();
		public abstract uint get_timeout ();
		public abstract bool is_valid_prefix (string line);
		public abstract void parse (string response) throws FsoGsm.AtCommandError;
		public abstract void parseMulti (string[] response) throws FsoGsm.AtCommandError;
		public abstract void parseTest (string response) throws FsoGsm.AtCommandError;
		public abstract FsoGsm.Constants.AtResponse validate (string[] response);
		public abstract FsoGsm.Constants.AtResponse validateMulti (string[] response);
		public abstract FsoGsm.Constants.AtResponse validateOk (string[] response);
		public abstract FsoGsm.Constants.AtResponse validateTest (string[] response);
		public abstract FsoGsm.Constants.AtResponse validateUrc (string response);
		public abstract FsoGsm.Constants.AtResponse validateUrcPdu (string[] response);
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public interface AtCommandQueueCommand : GLib.Object {
		public abstract string get_postfix ();
		public abstract string get_prefix ();
		public abstract uint get_retry ();
		public abstract uint get_timeout ();
		public abstract bool is_valid_prefix (string line);
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public interface CallHandler : FsoFramework.AbstractObject {
		public abstract async void activate (int id) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
		public abstract void addSupplementaryInformation (string direction, string info);
		public abstract void handleConnectingCall (FsoGsm.CallInfo call_info);
		public abstract void handleEndingCall (FsoGsm.CallInfo call_info);
		public abstract void handleIncomingCall (FsoGsm.CallInfo call_info);
		public abstract async void hold () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
		public abstract async int initiate (string number, string ctype) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
		public abstract async void release (int id) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
		public abstract async void releaseAll () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public interface Channel : FsoFramework.CommandQueue {
		public abstract void injectResponse (string response);
		public bool isActive ();
		public abstract async bool resume ();
		public abstract async bool suspend ();
		public signal void hangup ();
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public interface IPdpHandler : FsoFramework.AbstractObject {
		public abstract async void activate () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
		public abstract async void connectedWithNewDefaultRoute (FsoGsm.RouteInfo route);
		public abstract async void deactivate () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
		public abstract void disconnected ();
		public abstract async void statusUpdate (string status, GLib.HashTable<string,GLib.Variant> properties);
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public interface LowLevel : FsoFramework.AbstractObject {
		public abstract bool poweroff ();
		public abstract bool poweron ();
		public abstract bool resume ();
		public abstract bool suspend ();
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public interface Mediator {
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public interface Modem : FsoFramework.AbstractObject {
		public class Data : GLib.Object {
			public int alarmCleared;
			public string? atCommandCancelOutgoing;
			public string? atCommandRejectIncoming;
			public string charset;
			public Gee.HashMap<string,FsoGsm.AtCommandSequence> cmdSequences;
			public FsoGsm.ContextParams contextParams;
			public string functionality;
			public bool keepRegistration;
			public FsoGsm.NetworkTimeReport networkTimeReport;
			public string pppCommand;
			public string[] pppOptions;
			public string pppPort;
			public bool roamingAllowed;
			public FreeSmartphone.GSM.SIMAuthStatus simAuthStatus;
			public bool simBuffersSms;
			public bool simHasReadySignal;
			public string simIssuer;
			public GLib.HashTable<string,string> simOperatorbook;
			public Gee.HashMap<string,FsoGsm.PhonebookParams> simPhonebooks;
			public string simPin;
			public uint simReadyTimeout;
			public int speakerVolumeMaximum;
			public int speakerVolumeMinimum;
			public bool supportsCDMA;
			public bool supportsCSD;
			public string supportsFAX;
			public bool supportsGSM;
			public string supportsPDP;
			public bool supportsVoice;
			public Data ();
		}
		public enum Status {
			UNKNOWN,
			CLOSED,
			INITIALIZING,
			ALIVE_NO_SIM,
			ALIVE_SIM_LOCKED,
			ALIVE_SIM_UNLOCKED,
			ALIVE_SIM_READY,
			ALIVE_REGISTERED,
			SUSPENDING,
			SUSPENDED,
			RESUMING,
			CLOSING
		}
		public const int DEFAULT_RETRIES;
		public abstract void advanceToState (FsoGsm.Modem.Status status, bool force = false);
		public abstract string allocateDataPort ();
		public abstract FsoGsm.AtCommandSequence atCommandSequence (string channel, string purpose);
		public abstract FsoGsm.Channel? channel (string category);
		public abstract async void close ();
		public abstract T createAtCommand<T> (string command);
		public abstract T createMediator<T> () throws FreeSmartphone.Error;
		public abstract FsoGsm.Modem.Data data ();
		public abstract FreeSmartphone.GSM.DeviceStatus externalStatus ();
		public abstract void injectResponse (string command, string channel) throws FreeSmartphone.Error;
		public abstract bool isAlive ();
		public abstract async bool open ();
		public abstract async string[] processAtCommandAsync (FsoGsm.AtCommand command, string request, int retries = DEFAULT_RETRIES);
		public abstract async string[] processAtPduCommandAsync (FsoGsm.AtCommand command, string request, int retries = DEFAULT_RETRIES);
		public abstract void registerAtCommandSequence (string channel, string purpose, FsoGsm.AtCommandSequence sequence);
		public abstract void registerChannel (string name, FsoGsm.Channel channel);
		public abstract void releaseDataPort ();
		public abstract async bool resume ();
		public abstract async void setFunctionality (string level, bool autoregister, string pin) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
		public abstract FsoGsm.Modem.Status status ();
		public abstract async bool suspend ();
		public abstract T theDevice<T> ();
		public abstract FsoGsm.CallHandler callhandler { get; set; }
		public abstract GLib.Object parent { get; set; }
		public abstract FsoGsm.PhonebookHandler pbhandler { get; set; }
		public abstract FsoGsm.PdpHandler pdphandler { get; set; }
		public abstract FsoGsm.SmsHandler smshandler { get; set; }
		public abstract FsoGsm.WatchDog watchdog { get; set; }
		public signal void hangup ();
		public signal void signalStatusChanged (FsoGsm.Modem.Status status);
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public interface PhonebookHandler : FsoFramework.AbstractObject {
		public abstract FsoGsm.PhonebookStorage storage { get; set; }
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public interface SmsHandler : FsoFramework.AbstractObject {
		public abstract Gee.ArrayList<WrapHexPdu> formatTextMessage (string number, string contents, bool requestReport);
		public abstract async void handleIncomingSms (string hexpdu, int tpdulen);
		public abstract async void handleIncomingSmsOnSim (uint index);
		public abstract async void handleIncomingSmsReport (string hexpdu, int tpdulen);
		public abstract uint16 lastReferenceNumber ();
		public abstract uint16 nextReferenceNumber ();
		public abstract void storeTransactionIndizesForSentMessage (Gee.ArrayList<WrapHexPdu> hexpdus);
		public abstract FsoGsm.SmsStorage storage { get; set; }
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public interface UnsolicitedResponseHandler : FsoFramework.AbstractObject {
		public abstract bool dispatch (string prefix, string rhs, string? pdu = null);
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public interface WatchDog : GLib.Object {
		public abstract void check ();
		public abstract void resetUnlockMarker ();
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public errordomain AtCommandError {
		UNABLE_TO_PARSE
	}
	[CCode (cheader_filename = "fsogsm.h")]
	public static FsoGsm.Modem theModem;
	[CCode (cheader_filename = "fsogsm.h")]
	public static GLib.List<string> theServiceDependencies;
	[CCode (cheader_filename = "fsogsm.h")]
	public const string CONFIG_SECTION;
	[CCode (cheader_filename = "fsogsm.h")]
	public const int MUX_TRANSPORT_MAX_BUFFER;
	[CCode (cheader_filename = "fsogsm.h")]
	public const string PB_STORAGE_DEFAULT_STORAGE_DIR;
	[CCode (cheader_filename = "fsogsm.h")]
	public const int PB_STORAGE_DIRECTORY_PERMISSIONS;
	[CCode (cheader_filename = "fsogsm.h")]
	public const string SMS_STORAGE_DEFAULT_STORAGE_DIR;
	[CCode (cheader_filename = "fsogsm.h")]
	public const int SMS_STORAGE_DIRECTORY_PERMISSIONS;
	[CCode (cheader_filename = "fsogsm.h")]
	public const string SMS_STORAGE_SENT_UNCONFIRMED;
	[CCode (cheader_filename = "fsogsm.h")]
	public static void checkMultiResponseValid (FsoGsm.AtCommand command, string[] response) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	[CCode (cheader_filename = "fsogsm.h")]
	public static void checkResponseConnect (FsoGsm.AtCommand command, string[] response) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	[CCode (cheader_filename = "fsogsm.h")]
	public static FsoGsm.Constants.AtResponse checkResponseExpected (FsoGsm.AtCommand command, string[] response, FsoGsm.Constants.AtResponse[] expected) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	[CCode (cheader_filename = "fsogsm.h")]
	public static void checkResponseOk (FsoGsm.AtCommand command, string[] response) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	[CCode (cheader_filename = "fsogsm.h")]
	public static void checkResponseValid (FsoGsm.AtCommand command, string[] response) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	[CCode (cheader_filename = "fsogsm.h")]
	public static async void gatherSimOperators () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	[CCode (cheader_filename = "fsogsm.h")]
	public static async void gatherSimStatusAndUpdate () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	[CCode (cheader_filename = "fsogsm.h")]
	public static async void gatherSpeakerVolumeRange () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error;
	[CCode (cheader_filename = "fsogsm.h")]
	public static void registerGenericAtCommands (Gee.HashMap<string,FsoGsm.AtCommand> table);
	[CCode (cheader_filename = "fsogsm.h")]
	public static void registerGenericAtMediators (Gee.HashMap<GLib.Type,GLib.Type> table);
	[CCode (cheader_filename = "fsogsm.h")]
	public static async void triggerUpdateNetworkStatus ();
	[CCode (cheader_filename = "fsogsm.h")]
	public static void validateDtmfTones (string tones);
	[CCode (cheader_filename = "fsogsm.h")]
	public static void validatePhoneNumber (string number) throws FreeSmartphone.Error;
}
namespace Codec {
	[CCode (cheader_filename = "fsogsm.h")]
	public static string hexToString (string hex, uint lowest = 0x20, uint highest = 0x7f, char? subst = null);
}
[CCode (cheader_filename = "fsogsm.h")]
public class WrapSms {
	public int index;
	public Sms.Message message;
	public WrapSms (owned Sms.Message message, int index = -1);
}
[CCode (cheader_filename = "fsogsm.h")]
public class WrapHexPdu {
	public string hexpdu;
	public uint tpdulen;
	public int transaction_index;
	public WrapHexPdu (string hexpdu, uint tpdulen);
}
[CCode (cheader_filename = "fsogsm.h")]
public delegate void UnsolicitedResponseHandlerFunc (string prefix, string rhs);
[CCode (cheader_filename = "fsogsm.h")]
public delegate void UnsolicitedResponsePduHandlerFunc (string prefix, string rhs, string pdu);
